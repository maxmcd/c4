// Code generated by go-bindata.
// sources:
// .DS_Store
// 1522125626_add_users_table.down.sql
// 1522125626_add_users_table.up.sql
// bindata.go
// generate.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1526506262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1522125626_add_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xda\xad\xba\xb3\x1c\x00\x00\x00")

func _1522125626_add_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1522125626_add_users_tableDownSql,
		"1522125626_add_users_table.down.sql",
	)
}

func _1522125626_add_users_tableDownSql() (*asset, error) {
	bytes, err := _1522125626_add_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1522125626_add_users_table.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1522346053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1522125626_add_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4f\xc3\x20\x1c\xc5\xef\xfd\x14\xef\xb8\x26\x3b\x78\xdf\xa9\x3a\x4c\x1a\x91\x6a\xa5\x71\x3b\x11\x52\xfe\x59\x49\x84\x56\xa0\xd1\xf9\xe9\x4d\xcb\x34\xee\xec\x11\x7e\xef\xf1\x1e\xef\xae\x65\x95\x64\x90\xd5\x2d\x67\x98\x23\x85\x88\x4d\x01\x00\xd6\xe0\x85\xb5\x75\xc5\xf1\xd4\xd6\x8f\x55\x7b\xc4\x03\x3b\x6e\x57\xd4\x07\xd2\x89\x8c\xd2\x09\xc9\x3a\x8a\x49\xbb\x09\x1f\x36\x0d\xeb\x11\x5f\xa3\x27\x88\x46\x42\x74\x9c\x63\xcf\xee\xab\x8e\x4b\x88\xe6\x75\x53\x66\xff\x3c\x99\x7f\xf9\xa7\x61\x51\xd4\x42\x5e\xea\x8c\xb3\x4f\xe1\xac\xfa\xd1\xfc\xb9\x5d\xfe\xe2\xb5\x23\x48\x76\x90\xe8\x44\xfd\xdc\xb1\x4c\x3c\x7d\xba\x51\x05\x7a\x9f\x29\x26\x65\xcd\xaa\xc8\xe8\xa4\x1d\x45\x35\xbd\xe9\x33\x99\xe5\xa9\xdf\xf4\x9b\xcc\x83\x4e\xd6\x9f\x54\xec\x83\x4e\xfd\x70\xad\x28\xca\x5d\x51\x5c\xe6\xcc\x71\xa8\xc5\x9e\x1d\xd0\x88\x9f\x61\xd7\xe2\xdb\xab\xc2\xe5\xae\xf8\x0e\x00\x00\xff\xff\xc1\x5a\x99\xba\x83\x01\x00\x00")

func _1522125626_add_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1522125626_add_users_tableUpSql,
		"1522125626_add_users_table.up.sql",
	)
}

func _1522125626_add_users_tableUpSql() (*asset, error) {
	bytes, err := _1522125626_add_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1522125626_add_users_table.up.sql", size: 387, mode: os.FileMode(420), modTime: time.Unix(1526953541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\xc8\x11\x3d\x93\xbf\xa2\x57\xc0\x2e\xc4\x40\xd1\xf0\xfb\x43\xc0\x5c\xd6\xe3\x00\x3e\xc4\x0b\xc4\xde\x53\x2a\x18\x34\xc9\x6e\x85\x88\x24\xca\x24\xb5\xae\x19\x63\xfe\x7b\xf0\x58\x2d\x59\xe3\xac\x77\xbc\x8b\xcd\x61\x46\xdd\xcd\xee\xaa\x57\xd5\xd5\xef\xd5\xcd\x8d\x7a\xd5\xb7\x46\x6d\xcd\xc1\x0c\x7a\x32\xad\xaa\x1f\xd4\xb6\xff\x6b\xdd\x1d\x5a\x3d\xe9\xb5\x7f\x73\xa3\xc6\xfe\x34\x34\x66\xdc\x60\xbc\xbe\x7b\x77\xff\x6e\xea\x07\x83\x49\x94\xc5\x71\x14\x67\x79\x9c\xdf\xeb\xb6\xbd\x3f\x8d\x66\x18\xef\x27\x5d\xef\xcc\xba\xed\x3f\x1e\xd6\xe3\x87\xdd\x0b\xdb\x4e\xc7\xf3\xa6\xb3\xc3\x6d\x8f\xd9\x19\x8e\x9b\xee\xbb\xed\xa0\xa7\xae\x3f\x8c\x6e\xe1\xee\x27\xf5\xf6\xa7\xf7\xea\xf5\xdd\x9b\xf7\xdf\xf9\xfe\x51\x37\xff\xd1\x5b\x73\xb5\xcd\xf7\xbb\xfd\xb1\x1f\x26\xb5\xf4\xbd\x45\xfd\x30\x99\x71\xe1\x7b\x8b\xa6\xdf\x1f\x07\x33\x8e\x37\xdb\xc7\xee\x88\x05\xbb\x9f\xf0\xd3\xf5\xf2\xff\xa6\xeb\x4f\x53\xb7\xc3\xa4\x9f\x0f\x1c\xf5\xf4\xef\x1b\xdb\xed\x0c\x06\x58\x18\xa7\xa1\x3b\x6c\xe7\x6f\x53\xb7\x37\x0b\x3f\xf0\x7d\x7b\x3a\x34\x67\xf8\xff\x30\xba\x5d\x62\xa0\xfe\xf9\x2f\xb8\x5d\xa9\x83\xde\x1b\x25\xc7\x02\xb5\x3c\xaf\x9a\x61\xe8\x87\x40\x7d\xf2\xbd\xed\xe3\x3c\x53\x9b\x5b\x05\x54\xeb\xb7\xe6\x23\x8c\x98\x61\x39\xc3\xc6\xfc\xc7\x93\xb5\x66\x98\xcd\x06\x81\xef\x75\x76\x3e\xf0\xdd\xad\x3a\x74\x3b\x98\xf0\x06\x33\x9d\x86\x03\xa6\x2b\x65\xf7\xd3\xfa\x35\xac\xdb\xe5\x02\x86\xd4\xf7\x1f\x36\xea\xfb\x5f\x16\x82\x64\xf6\x15\xf8\xde\x93\xef\x7b\xbf\xe8\x41\xd5\x27\xab\xc4\x8f\x38\xf1\xbd\x7b\x81\x73\xab\xba\x7e\xfd\xaa\x3f\x3e\x2c\x7f\xa8\x4f\x76\xa5\xb6\x8f\x81\xef\x35\xbb\xd7\x67\xa4\xeb\x57\xbb\x7e\x34\xcb\xc0\xff\xb3\xf0\xc0\x8c\xd8\xff\x8a\x21\x33\x0c\x82\xdb\x2d\xd6\x27\xbb\xfe\x11\xd0\x97\xc1\x0a\x3b\xfc\x27\xdf\x9f\x1e\x8e\x46\xe9\x71\x34\x13\x52\x7e\x6a\x26\x58\x99\xe3\x73\xf7\xe1\x7b\xdd\xc1\xf6\x4a\xf5\xe3\xfa\x6f\xdd\xce\xbc\x39\xd8\xfe\x72\xce\x5d\xe1\x79\xfd\xca\xc2\x7c\x87\x4a\xb9\x6b\xf4\xbd\xb1\x7b\x9c\xe7\xdd\x61\xca\x53\xdf\xdb\xe3\x01\xa9\x8b\xd1\xbf\xf7\xad\x99\x17\xdf\x77\x7b\xa3\x50\x26\x6b\x8c\xe0\x67\x2e\x95\xa5\xed\xbe\xf4\x15\xa8\xb7\x7a\x6f\x96\x81\xf3\x00\x9f\x2e\x4a\xdb\xad\xe1\xdd\x7f\xfa\x8d\xb3\xef\xba\x47\x9c\x9d\xd1\x3c\x3f\x0a\xa0\xbf\x79\x14\x58\x97\xc1\x35\xf2\xe7\x06\x10\xda\x4b\x06\x10\xdc\x32\xf8\x1c\xe8\xff\x58\x70\xd1\x7f\xdd\xc8\x9b\xf1\xae\x1b\x96\x81\xaa\xfb\x7e\x77\x7d\x5a\xef\xc6\x17\x22\x7f\x18\x25\x70\x33\x58\xdd\x98\x4f\x4f\x57\xa7\x5d\x49\xa0\xca\xef\xef\xc6\xfb\x11\xa4\xa5\x6e\x5d\x1d\x2c\x17\xc4\x91\x25\x2e\x6b\xe2\xb0\x24\x0e\xc3\x5f\xff\xb3\x96\xd8\x34\xc4\x6d\x49\x9c\x44\xc4\xa1\x26\x0e\x63\x19\x47\x21\x71\x99\x11\x9b\x88\x38\x29\x64\x2d\xcd\x88\x9b\x90\x38\xce\x89\x75\x46\x9c\x67\xc4\x11\xce\xc0\x0e\x6c\xb6\xc4\x4d\x4c\x5c\xc7\xc4\x95\x91\xbd\x61\x4d\x9c\x95\xc4\x05\x70\x64\xc4\xb6\x26\x8e\x1a\xe2\xac\x25\xae\x72\xe2\xa2\x22\xce\x43\xf9\x6b\x33\xe2\xd4\x10\x97\x0d\x71\x53\xcb\xde\x14\x38\x8d\x9c\x05\x8e\x58\x13\x47\xb9\xe0\x89\x13\x89\xa3\xaa\x89\x8d\x21\xae\x0b\xe2\x28\x21\xae\xe0\x17\xdf\x53\xf1\x5b\x44\xc4\x4d\x4a\x9c\xd6\xc4\x65\x45\x5c\x5a\xe2\x2a\x23\x6e\x43\xc1\x11\x01\xa3\x25\x4e\x13\xe2\x34\xfd\xfc\xd7\xe4\xc4\x79\x2e\xb1\xd4\xa9\xe4\xcb\x66\xc4\x21\xfc\x44\xc4\x55\x24\xf9\x89\x1b\x87\x35\x21\xce\x31\xaf\x89\xdb\x9a\xb8\x6e\xc4\x86\x29\x88\xc3\x44\xfc\xd4\x35\x71\x92\x11\x57\x15\x71\xdc\x12\xe7\x8d\xe4\x11\x31\xb4\x85\xe0\x05\x16\xe4\x03\xf1\xcd\xeb\x25\x71\xd3\x48\xdc\x75\x2e\xf9\x6d\x5a\xc9\x51\xea\x7e\x13\xc4\x89\x3d\x25\x71\x6b\x89\xdb\x4a\xd6\x74\x24\x6b\xba\x90\x3b\x05\x36\xf8\xb4\x38\x67\x88\x8b\x42\xfc\xd8\x98\xd8\x58\xe2\xe2\x1c\x2f\xf6\x34\x92\xfb\xca\x8a\xcd\xc6\x4a\x0e\x62\x77\xc7\x88\x35\x72\xf1\xcd\x18\x1a\xe2\xa4\x95\xfc\x94\xb1\xcb\x55\x2b\x77\xa4\x0d\x71\xdb\xca\x1a\xb0\xcc\xb9\xc6\xdd\x86\xc4\x89\x95\x3a\x41\x1d\x61\x4f\x86\x3b\xc6\x39\x77\x0f\x61\x4e\x6c\x93\xe7\xb5\x6c\x1d\x96\x5c\xcb\xbc\x2c\x89\x73\x77\x26\xba\xec\x5b\x9c\x15\xec\xfc\x46\x1c\xa7\xfe\x9a\x56\x9d\x99\xf7\x4a\xeb\x7c\xcf\xbb\xbc\xae\x95\xef\x79\x8b\x4b\x83\xb0\x58\xf9\x5e\x70\x21\xbd\xf3\x1e\x18\xfe\xcb\xcc\xd0\xd7\x86\x67\x8a\xbe\xe8\xe0\x17\x48\x5e\x52\x98\x8b\x30\xcc\xd4\xbe\xb9\xfd\x92\x26\x3e\x81\x40\x37\xea\x1a\x99\x02\x31\x6e\x54\x1e\xa5\xe5\x4a\x81\xe3\x36\xd7\x14\xb8\x4c\xe3\x30\x98\xd7\xc1\x5c\x1b\x61\xb6\x9f\x0f\x1d\x2f\xa3\x2c\xce\xb3\x30\x8f\xf3\x78\xa5\xc2\xe0\xc9\xf7\x34\xfc\xfd\x30\xc7\xf3\x69\x0e\x62\xa3\x5c\x2c\x00\xb3\x99\xff\x3f\x5d\x12\xa7\x57\xcf\x58\xe9\xfe\xeb\x8d\xd1\x5d\xff\xf1\xf0\xee\xc3\xee\x0f\xf1\x55\x11\x13\x87\x95\xd4\x2b\xea\x25\x0b\xe5\x0c\xde\x78\x91\xca\x3a\xc6\x19\xb8\xaa\x24\x4e\xc1\x35\xa8\x35\xbc\x81\x56\xd6\xf0\x5e\x63\x43\x1c\x57\xc4\x59\x4e\x1c\x97\xf2\x16\xc1\x3d\xf8\x05\xc7\xe0\x9d\x99\x5c\xf8\x10\x35\xf5\x65\xdd\xb5\x5a\xec\xd5\xd8\x9b\x08\xa7\x7d\xc6\x7a\xa9\xbb\x97\xb3\xf0\xfb\x2b\xf2\x65\x9b\x73\xad\x7e\x43\xff\xfa\xbc\x8a\x5f\xb6\xfb\x2d\xf5\xfd\xcd\x11\xff\x59\x95\xff\x4d\x71\xba\x37\x11\xff\xee\x17\x11\x27\x69\x1e\x66\xc9\xff\xf9\x45\xfc\x7c\xfc\xa3\xef\x41\xa7\xa2\x77\x29\xf4\x19\x1c\x9d\x10\xc7\xa1\xd4\x63\x93\x09\xa7\x83\xeb\xa3\x54\xc6\x75\x29\xfa\x9d\xd4\xa2\x35\xe0\x75\x0d\xad\xd0\xf2\x56\xa0\xe7\xd0\x35\xf0\x2a\x34\x1e\x6f\x09\x7b\xa1\x77\x59\x2c\x7a\x90\x55\xc4\x29\x74\x34\x95\xf7\xa3\xa1\xdd\x11\xb1\xad\x88\x4d\x75\xa5\x49\xa9\xe8\x32\x7a\x0c\x9c\x2f\x8c\xc3\x03\xdd\x70\x63\xe8\xc2\xac\x7f\xe8\x27\x5c\x2c\xe8\x03\x66\x6d\x2c\x88\xab\x52\xf4\x09\xbd\x08\x38\x1e\xb6\xa1\xed\x88\xbf\xcd\xa5\xef\xc0\xb7\x1a\x58\x33\x89\x19\xf6\xdb\x54\xbe\x43\xeb\xc1\x05\x45\x2d\x3d\x00\x74\x18\xf1\xe4\x88\xa3\x90\x7d\xd0\xab\x36\x76\xbd\x41\x23\x63\x70\x4c\xe3\xf2\x52\x6a\x89\x17\xda\x8d\x75\xdc\x4d\x92\x8b\xb6\x99\x73\x6e\x10\x0b\x72\x5f\x38\x9c\x39\x71\x1a\x0b\x27\x55\xd0\xf8\x44\xf4\x13\xf9\xd0\xe8\x43\x8c\xeb\x47\x4a\xe1\x19\x60\x07\x4f\xa1\xdf\xc0\xbd\x42\x4b\xd1\x23\x14\x56\xf2\x0a\xcd\x84\xde\x66\x2e\x36\xd8\xce\x90\x43\x2d\x98\xc1\x41\xb8\x7f\xf4\x23\x1a\xba\xad\xdd\x9d\xe0\x5b\x25\x7d\x0e\xee\xce\xc4\x92\xab\xd8\x71\xe2\xac\xf7\x21\xb1\x29\x45\x6b\x51\x2b\x2d\xce\x44\x52\x0f\xc0\x51\x38\x9e\x83\x6f\xf4\x61\x85\x96\x9e\x00\xfc\x89\x5a\xc2\xfd\xa1\x1f\xd1\x5a\xf8\x15\xb6\x50\x97\xd0\x70\xf4\x8c\xe8\x77\xea\x56\x6a\x23\x49\x24\x2e\x93\x49\xdd\xa1\xfe\x6c\x2a\x7d\x0e\x7a\x9c\x32\x11\x1e\xc6\xdd\xc1\x47\x96\x4a\xfd\x9c\xd7\x81\xaf\x08\x85\x7b\xc1\xdb\x8d\x96\xd8\x80\x2d\x6b\x24\x97\xb0\x83\xba\xd5\xff\x0d\x00\x00\xff\xff\xb5\x5f\x2d\x46\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1526953653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\x56\xd0\xe3\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x45\x12\xe5\x02\x04\x00\x00\xff\xff\xd3\xb0\x8e\xc1\x3f\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 63, mode: os.FileMode(420), modTime: time.Unix(1526506084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x5d\x6f\xdb\x36\x14\x86\xaf\xc9\x5f\x71\xaa\x0b\x8f\x2a\x1c\xa9\x03\x76\x95\xc2\x03\x82\x66\x01\x7a\xd1\x14\x68\x57\xec\x22\xcb\x5c\x9a\x3a\xa6\x08\x4b\x87\x1a\x49\xd9\x09\xda\xfc\xf7\x81\xd4\x47\x9d\xcc\x45\x83\x61\x17\x86\x40\xf1\x7c\x3c\xef\xf1\x7b\xd4\x49\xb5\x93\x1a\xa1\x35\xda\xc9\x60\x2c\x79\xce\x4d\xdb\x59\x17\x40\x70\x96\x39\xd4\x78\xd7\x65\x9c\x65\xde\xba\x90\x9e\xc1\x29\x4b\xfb\x8c\x73\x96\x69\x13\xea\x7e\x53\x28\xdb\x96\xda\x36\x92\xf4\xd9\x50\x06\xcb\xf1\x99\x71\xb6\x86\x1f\x87\x95\x95\x0c\x72\x23\x3d\x96\xca\xaa\x9d\xb3\x52\xd5\xd5\x26\xe3\x6c\x63\x28\xde\x3c\xa7\x82\xb7\xbd\x53\x58\x6a\x7b\x36\x26\x65\xa7\xf8\x4a\xdd\x58\xfd\xe4\xa6\x95\x77\xad\xaa\x4a\xf5\x4b\xb9\x91\x6a\x87\x54\x95\xdd\x4e\x97\xca\xd2\xd6\xe8\x8c\xe7\x9c\x6f\x7b\x52\xa0\x31\xbc\x9b\x47\x24\x72\x10\x2f\xc7\xce\xc5\xf0\x1a\x97\x70\x73\x6b\x28\xe4\xf0\x85\xb3\xb2\x84\xdf\xdf\x5f\xbe\x3f\x87\x4b\xdc\xf4\x1a\x0e\xf5\x3d\x84\xfa\x78\xc6\x20\x1d\xd2\x4f\x01\x5c\x4f\x64\x48\x03\xee\x91\x20\xd4\xb6\xd7\x75\x8c\xbc\x07\x5f\xdb\x03\xf4\x1d\x18\x82\x51\x0f\x67\x1e\xce\x57\xd3\xa9\xf8\x80\x83\x62\x71\xe1\x3d\x86\x6b\xd9\xa2\x17\xf9\x92\x33\x16\x69\x05\xc9\x16\xc1\x07\x67\x48\xe7\x20\x6e\x6e\x37\xf7\x11\x10\x9d\xb3\x2e\x01\x32\xe6\x30\xf4\x8e\x20\x65\xa7\xf0\x9c\x33\xf6\x90\x73\xb6\x97\xee\x1b\xe8\x7a\x8f\xce\x1b\x4b\xb0\x82\xc1\x09\xc5\xbb\xde\x87\x37\xb6\xed\x4c\x83\xe2\xf3\x5f\x7f\x56\x2f\x3f\x8f\x39\x63\xa4\x1f\xc6\xc0\x59\xf4\x4b\xf1\x31\x21\x78\xe1\x8b\x44\x98\x73\xb6\xb5\x0e\xd6\x4b\x48\x80\xe7\x2b\x70\x92\x34\xc2\x78\x9d\xc8\xcc\x76\x04\x5f\xb7\xfb\x18\xf1\x2f\x96\xe2\xca\x50\x35\x14\x1e\xc0\x5f\x1f\x25\xbc\x58\x41\x96\x0d\x0a\xdb\x7d\x52\x1c\x6b\x8c\x9e\x2d\x2e\x82\x35\x62\x0e\x8e\x8a\x63\xbb\x18\xb4\x5a\x01\x99\x06\x16\x8b\xf8\x8e\x89\x06\x49\x4c\x82\xf2\x78\xf9\x2a\x87\xaf\x5f\x4f\xdd\xfd\x0a\xaf\x60\xb1\x98\xd5\xdf\x3c\xba\x3d\xfb\xf9\x36\x12\xb5\xfb\x71\xe8\x6c\x1e\xd2\x0a\x64\xd7\x21\x55\x73\xec\x12\x46\xa0\x07\x9e\x7e\x0f\xe3\x04\xdf\x52\xf0\xdf\x0a\x72\x56\xcd\xa2\x26\x27\xfc\x61\x42\xfd\x96\x7c\x90\xa4\x50\xc4\x90\x51\xd2\x8b\x41\x52\x6c\x1c\x5d\x5f\x5c\xc9\x20\x1b\x81\xce\xe5\xa9\x7a\x3b\x17\x9a\x8c\x7c\x8d\x87\x58\xeb\x63\xf2\xd5\x5c\x91\x33\x96\x1d\x6d\xd5\x12\xaa\x25\x0c\xcb\x51\x5c\x8e\x5b\xfb\xc9\x35\x22\x9b\x37\x37\xcb\x9f\xcd\x30\x9a\xb0\x5d\xce\xf3\xe3\x0f\xe3\xbe\x7d\xe8\xe9\xd1\xbe\x7d\x49\xc4\xeb\xc8\xfb\x64\x15\xe7\x66\x51\x4a\xf1\xa9\x13\xf9\xeb\xe3\xde\x8b\xc5\x74\x9a\x74\xfe\xe6\xdc\xb5\x7d\x53\x27\xe7\x7d\x87\x6c\xa2\xb8\x74\xb6\xbb\x68\x9a\xff\x44\x12\x73\x9f\xb0\xfc\xa8\x9b\x3d\xd0\xe9\x6e\xb3\x6f\x4e\x35\x2d\xcb\xb9\x5b\x3a\x6c\xad\x53\x98\x3e\x38\x84\x07\xf4\x61\xca\x06\xe9\xe1\x80\xe0\xf0\xef\xde\x38\x84\xca\x1e\xe8\xf8\x93\x14\x6c\xca\x56\x35\xaa\x5d\xac\x01\x78\x67\x7c\x40\x52\xf8\x58\xd7\x55\x2c\x2f\xbe\x6b\xf8\x67\x29\x7e\x3c\x28\x7b\xa0\xff\xe7\x4f\xfb\x27\x00\x00\xff\xff\xec\xb5\x29\x8b\xcd\x06\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 1741, mode: os.FileMode(420), modTime: time.Unix(1526509267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"1522125626_add_users_table.down.sql": _1522125626_add_users_tableDownSql,
	"1522125626_add_users_table.up.sql": _1522125626_add_users_tableUpSql,
	"bindata.go": bindataGo,
	"generate.go": generateGo,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"1522125626_add_users_table.down.sql": &bintree{_1522125626_add_users_tableDownSql, map[string]*bintree{}},
	"1522125626_add_users_table.up.sql": &bintree{_1522125626_add_users_tableUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"generate.go": &bintree{generateGo, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

