// Code generated by go-bindata.
// sources:
// .DS_Store
// bindata.go
// generate.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1526506262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1526507731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\x56\xd0\xe3\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x45\x12\xe5\x02\x04\x00\x00\xff\xff\xd3\xb0\x8e\xc1\x3f\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 63, mode: os.FileMode(420), modTime: time.Unix(1526506084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcf\x6f\xdb\x36\x14\xc7\xcf\xe4\x5f\xf1\xaa\x83\x47\x15\x8e\xd4\x5e\x06\x2c\x85\x07\x04\xcd\x02\xf4\xd0\x14\x68\x57\xec\x90\x65\x2e\x2d\x3d\x53\x84\xa5\x47\x8d\xa4\xec\x04\x6d\xfe\xf7\x81\x14\xa5\x3a\x59\x8a\x04\xc3\x0e\x86\x40\xf1\xfd\xf8\x7c\x9f\xbf\x4f\xbd\xac\x76\x52\x21\x74\x5a\x59\xe9\xb5\x21\xc7\xb9\xee\x7a\x63\x3d\x08\xce\x32\x8b\x0a\x6f\xfa\x8c\xb3\xcc\x19\xeb\xe3\xd3\xdb\xca\xd0\x3e\xe3\x9c\x65\x4a\xfb\x66\xd8\x14\x95\xe9\x4a\x65\x5a\x49\xea\x64\x2c\x83\x65\x7a\x66\x9c\xad\xe1\xe9\xb0\xb2\x96\x5e\x6e\xa4\xc3\xb2\x32\xd5\xce\x1a\x59\x35\xf5\x26\xe3\x6c\xa3\x29\xdc\x3c\xa7\x82\x33\x83\xad\xb0\x54\xe6\x24\x25\x65\x8f\xf1\x95\xaa\x35\xea\xc1\x4d\x27\x6f\xba\xaa\x2e\x7f\xb9\x79\xfd\x73\xb9\x91\xd5\x0e\xa9\x2e\xfb\x9d\x2a\x2b\x43\x5b\xad\x32\x9e\x73\xbe\x1d\xa8\x02\x85\xfe\xfd\x3c\x24\x91\x83\x78\x99\x7a\x17\xe3\x6b\x5c\xc2\xd5\xb5\x26\x9f\xc3\x57\xce\xca\x12\x7e\xff\x70\xfe\xe1\x14\xce\x71\x33\x28\x38\x34\xb7\xe0\x9b\xe3\x29\x83\xb4\x48\x3f\x79\xb0\x03\x91\x26\x05\xb8\x47\x02\xdf\x98\x41\x35\x21\xf2\x16\x5c\x63\x0e\x30\xf4\xa0\x09\x92\x22\xce\x1c\x9c\xae\xa6\x53\xf1\x11\x47\xcd\xe2\xcc\x39\xf4\x97\xb2\x43\x27\xf2\x25\x67\x2c\xd0\x0a\x92\x1d\x82\xf3\x56\x93\xca\x41\x5c\x5d\x6f\x6e\x03\x20\x5a\x6b\x6c\x04\x64\xcc\xa2\x1f\x2c\x41\xcc\x8e\xe1\x39\x67\xec\x2e\xe7\x6c\x2f\xed\x77\xd0\xf5\x1e\xad\xd3\x86\x60\x05\xa3\x17\x8a\xf7\x83\xf3\x6f\x4d\xd7\xeb\x16\xc5\x97\xbf\xfe\xac\x5f\x7e\x49\x39\x29\xd2\x8d\x63\xe0\x2c\x38\xa6\xf8\x14\x11\x9c\x70\x45\x24\xcc\x39\xdb\x1a\x0b\xeb\x25\x44\xc0\xd3\x15\x58\x49\x0a\x21\x5d\x47\x32\xbd\x4d\xe0\xeb\x6e\x1f\x22\xfe\xc5\x52\x5c\x68\xaa\xc7\xc2\x23\xf8\x9b\xa3\x84\x17\x2b\xc8\xb2\x51\x61\xb7\x8f\x8a\x43\x8d\xe4\xda\xe2\xcc\x1b\x2d\xe6\xe0\xa0\x38\xb4\x0b\x41\xab\x15\x90\x6e\x61\xb1\x08\xef\x98\x68\x91\xc4\x24\x28\x0f\x97\xaf\x72\xf8\xf6\xed\xb1\xbb\x5f\xe1\x15\x2c\x16\xb3\xfa\xab\x7b\xb7\x27\xaf\xaf\x03\x51\xb7\x4f\x43\x67\xf3\x90\x56\x20\xfb\x1e\xa9\x9e\x63\x97\x90\x80\xee\x78\xfc\xdd\xa5\x09\xbe\x23\xef\xbe\x17\xe4\xac\x9e\x45\x4d\x4e\xf8\x43\xfb\xe6\x1d\x39\x2f\xa9\x42\x11\x42\x92\xa4\x17\xa3\xa4\xd0\x38\xf8\xbe\xb8\x90\x5e\xb6\x02\xad\xcd\x63\xf5\x6e\x2e\x34\x19\xf9\x12\x0f\xa1\xd6\xa7\xe8\xab\xb9\x22\x67\x2c\x3b\xda\xab\x25\xd4\x4b\x18\x97\xa3\x38\x4f\x7b\xfb\xd9\xb6\x22\x9b\x77\x37\xcb\x9f\xcd\x90\x4c\xd8\x2d\xe7\xf9\xf1\xbb\xb4\x6f\x1f\x07\xba\xb7\x6f\x5f\x23\xf1\x3a\xf0\x3e\x58\xc5\xb9\x59\x90\x52\x7c\xee\x45\xfe\xe6\xb8\xf7\x62\x31\x9d\x26\x9d\xbf\x59\x7b\x69\xde\x36\xd1\x79\x3f\x20\x9b\x28\xce\xad\xe9\xcf\xda\xf6\x3f\x91\x84\xdc\x07\x2c\x4f\x75\x33\x07\x7a\xbc\xdb\xec\x9b\xc7\x9a\x96\xe5\xdc\x2d\x1e\xb6\xc6\x56\x18\x3f\x38\x84\x07\x74\x7e\xca\x06\xe9\xe0\x80\x60\xf1\xef\x41\x5b\x84\xda\x1c\xe8\xf8\x93\xe4\x4d\xcc\xae\x1a\xac\x76\xa1\x06\xe0\x8d\x76\x1e\xa9\xc2\xfb\xba\x2e\x42\x79\xf1\x43\xc3\x3f\x4b\xf1\xfd\x41\x99\x03\xfd\x3f\x7f\xda\x3f\x01\x00\x00\xff\xff\x98\x2c\x92\x3f\xcf\x06\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 1743, mode: os.FileMode(420), modTime: time.Unix(1526506084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"bindata.go": bindataGo,
	"generate.go": generateGo,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"generate.go": &bintree{generateGo, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

