// Code generated by go-bindata.
// sources:
// .DS_Store
// 1522125626_add_users_table.down.sql
// 1522125626_add_users_table.up.sql
// bindata.go
// generate.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1526506262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1522125626_add_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xda\xad\xba\xb3\x1c\x00\x00\x00")

func _1522125626_add_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1522125626_add_users_tableDownSql,
		"1522125626_add_users_table.down.sql",
	)
}

func _1522125626_add_users_tableDownSql() (*asset, error) {
	bytes, err := _1522125626_add_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1522125626_add_users_table.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1522346053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1522125626_add_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x4f\xc3\x30\x10\xc5\xf7\x7c\x8a\x37\xd6\x52\x87\x30\x30\x75\x32\xd4\x48\x16\xc6\x81\xe0\x88\x76\x8a\xac\xda\xa2\x1e\xe2\x04\xc7\x11\x7f\x3e\x3d\x8a\x9d\x22\xc2\xca\x78\xef\xbd\xbb\xdf\xdd\xdd\xd6\x8c\x2a\x06\x45\x6f\x04\xc3\x34\xda\x30\x62\x53\x00\x80\x33\x78\x66\x35\xa7\x02\x8f\x35\x7f\xa0\xf5\x11\xf7\xec\xb8\x4d\xd6\x29\x58\x1d\xad\x69\x75\x44\x74\x9d\x1d\xa3\xee\x06\xbc\xbb\x78\x4e\x25\xbe\x7a\x6f\x21\x2b\x05\xd9\x08\x81\x3d\xbb\xa3\x8d\x50\x90\xd5\xcb\x86\xe4\xfe\x69\x30\xff\xea\x1f\xce\x73\x82\x4b\xb5\xac\xd3\x4f\x3e\x86\xcf\xf6\xd4\x9b\x5f\xea\x7c\x8b\xd7\x9d\x85\x62\x07\x85\x46\xf2\xa7\x86\x65\xc7\xdb\x8f\xae\x6f\x83\x7d\x9b\xec\x18\x5b\x67\x52\x22\x5b\x41\x47\xe7\x5f\xe7\x21\x3f\xdc\xab\xeb\xb2\x2c\xcb\x6c\x73\xb9\x67\x07\x6c\x12\x9f\xac\xa4\x0b\x6d\xad\xfe\x25\x91\x82\xec\x8a\x62\x79\x79\x5e\x69\x89\x56\xf2\xf2\xfc\x34\x7c\xbb\x3a\x8a\xec\x8a\xef\x00\x00\x00\xff\xff\x16\x06\x23\x32\xa7\x01\x00\x00")

func _1522125626_add_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1522125626_add_users_tableUpSql,
		"1522125626_add_users_table.up.sql",
	)
}

func _1522125626_add_users_tableUpSql() (*asset, error) {
	bytes, err := _1522125626_add_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1522125626_add_users_table.up.sql", size: 423, mode: os.FileMode(420), modTime: time.Unix(1526664770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\xc8\x11\x3d\x93\xbf\xa2\x57\xc0\x2e\xc4\x40\xd1\xf0\xfb\x43\xc0\x5c\xd6\xe3\x00\x3e\xc4\x0b\xc4\xde\x53\x2a\x18\xf0\xa3\x5b\x21\x22\x89\x32\x49\xad\x6b\xc6\x98\xff\x1e\xbc\xae\x96\xac\x71\xd6\x3b\xde\xc5\xe6\x40\x89\xdd\xec\xae\x7a\x55\x5d\xfd\x5e\xdd\xdc\xa8\x57\x43\xa7\xd5\x56\x1f\xf4\x58\xcf\xba\x53\xcd\x83\xda\x0e\x7f\x6d\xfa\x43\x57\xcf\xf5\xda\xbf\xb9\x51\xd3\x70\x1a\x5b\x3d\x6d\xf0\xbe\xbe\x7b\x77\xff\x6e\x1e\x46\x8d\x41\x94\xc5\x71\x14\x67\x79\x9c\xdf\xd7\x5d\x77\x7f\x9a\xf4\x38\xdd\xcf\x75\xb3\xd3\xeb\x6e\xf8\x78\x58\x4f\x1f\x76\x2f\x2c\x3b\x1d\xcf\x8b\xce\x0e\xb7\x03\x46\x67\x38\x6e\xb8\xef\xb7\x63\x3d\xf7\xc3\x61\x72\x13\x77\x3f\xa9\xb7\x3f\xbd\x57\xaf\xef\xde\xbc\xff\xce\xf7\x8f\x75\xfb\x9f\x7a\xab\xaf\x96\xf9\x7e\xbf\x3f\x0e\xe3\xac\x96\xbe\xb7\x68\x1e\x66\x3d\x2d\x7c\x6f\xd1\x0e\xfb\xe3\xa8\xa7\xe9\x66\xfb\xd8\x1f\x31\x61\xf6\x33\xfe\xfa\x41\x7e\x6f\xfa\xe1\x34\xf7\x3b\x0c\x06\xbb\xe1\x58\xcf\xff\xbe\x31\xfd\x4e\xe3\x05\x13\xd3\x3c\xf6\x87\xad\xfd\x36\xf7\x7b\xbd\xf0\x03\xdf\x37\xa7\x43\x7b\x86\xff\x0f\x5d\x77\x4b\xbc\xa8\x7f\xfe\x0b\x6e\x57\xea\x50\xef\xb5\x92\x6d\x81\x5a\x9e\x67\xf5\x38\x0e\x63\xa0\x3e\xf9\xde\xf6\xd1\x8e\xd4\xe6\x56\x01\xd5\xfa\xad\xfe\x08\x23\x7a\x5c\x5a\xd8\x18\xff\x78\x32\x46\x8f\xd6\x6c\x10\xf8\x5e\x6f\xec\x86\xef\x6e\xd5\xa1\xdf\xc1\x84\x37\xea\xf9\x34\x1e\x30\x5c\x29\xb3\x9f\xd7\xaf\x61\xdd\x2c\x17\x30\xa4\xbe\xff\xb0\x51\xdf\xff\xb2\x10\x24\xd6\x57\xe0\x7b\x4f\xbe\xef\xfd\x52\x8f\xaa\x39\x19\x25\x7e\xc4\x89\xef\xdd\x0b\x9c\x5b\xd5\x0f\xeb\x57\xc3\xf1\x61\xf9\x43\x73\x32\x2b\xb5\x7d\x0c\x7c\xaf\xdd\xbd\x3e\x23\x5d\xbf\xda\x0d\x93\x5e\x06\xfe\x9f\x85\x07\x66\xc4\xfe\x57\x0c\xe9\x71\x14\xdc\x6e\xb2\x39\x99\xf5\x8f\x80\xbe\x0c\x56\x58\xe1\x3f\xf9\xfe\xfc\x70\xd4\xaa\x9e\x26\x3d\x23\xe5\xa7\x76\x86\x15\x1b\x9f\x3b\x0f\xdf\xeb\x0f\x66\x50\x6a\x98\xd6\x7f\xeb\x77\xfa\xcd\xc1\x0c\x97\x7d\xee\x08\xcf\xf3\x57\x16\xec\x19\x2a\xe5\x8e\xd1\xf7\xa6\xfe\xd1\x8e\xfb\xc3\x9c\xa7\xbe\xb7\xc7\x05\x52\x17\xa3\x7f\x1f\x3a\x6d\x27\xdf\xf7\x7b\xad\x50\x26\x6b\xbc\xc1\x8f\x2d\x95\xa5\xe9\xbf\xf4\x15\xa8\xb7\xf5\x5e\x2f\x03\xe7\x01\x3e\x5d\x94\xa6\x5f\xc3\xbb\xff\xf4\x1b\x7b\xdf\xf5\x8f\xd8\x6b\xd1\x3c\xdf\x0a\xa0\xbf\xb9\x15\x58\x97\xc1\x35\xf2\xe7\x06\x10\xda\x4b\x06\x10\xdc\x32\xf8\x1c\xe8\xff\x58\x70\xd1\x7f\xdd\xc8\x9b\xe9\xae\x1f\x97\x81\x6a\x86\x61\x77\xbd\xbb\xde\x4d\x2f\x44\xfe\x30\x49\xe0\x7a\x34\x75\xab\x3f\x3d\x5d\xed\x76\x25\x81\x2a\xbf\xbf\x9b\xee\x27\x90\x96\xba\x75\x75\xb0\x5c\x10\x47\x86\xb8\x6c\x88\xc3\x92\x38\x0c\x7f\xfd\x31\x86\x58\xb7\xc4\x5d\x49\x9c\x44\xc4\x61\x4d\x1c\xc6\xf2\x1e\x85\xc4\x65\x46\xac\x23\xe2\xa4\x90\xb9\x34\x23\x6e\x43\xe2\x38\x27\xae\x33\xe2\x3c\x23\x8e\xb0\x07\x76\x60\xb3\x23\x6e\x63\xe2\x26\x26\xae\xb4\xac\x0d\x1b\xe2\xac\x24\x2e\x80\x23\x23\x36\x0d\x71\xd4\x12\x67\x1d\x71\x95\x13\x17\x15\x71\x1e\xca\xd3\x65\xc4\xa9\x26\x2e\x5b\xe2\xb6\x91\xb5\x29\x70\x6a\xd9\x0b\x1c\x71\x4d\x1c\xe5\x82\x27\x4e\x24\x8e\xaa\x21\xd6\x9a\xb8\x29\x88\xa3\x84\xb8\x82\x5f\x7c\x4f\xc5\x6f\x11\x11\xb7\x29\x71\xda\x10\x97\x15\x71\x69\x88\xab\x8c\xb8\x0b\x05\x47\x04\x8c\x86\x38\x4d\x88\xd3\xf4\xf3\xd3\xe6\xc4\x79\x2e\xb1\x34\xa9\xe4\xcb\x64\xc4\x21\xfc\x44\xc4\x55\x24\xf9\x89\x5b\x87\x35\x21\xce\x31\x6e\x88\xbb\x86\xb8\x69\xc5\x86\x2e\x88\xc3\x44\xfc\x34\x0d\x71\x92\x11\x57\x15\x71\xdc\x11\xe7\xad\xe4\x11\x31\x74\x85\xe0\x05\x16\xe4\x03\xf1\xd9\xf9\x92\xb8\x6d\x25\xee\x26\x97\xfc\xb6\x9d\xe4\x28\x75\xff\x09\xe2\xc4\x9a\x92\xb8\x33\xc4\x5d\x25\x73\x75\x24\x73\x75\x21\x67\x0a\x6c\xf0\x69\xb0\x4f\x13\x17\x85\xf8\x31\x31\xb1\x36\xc4\xc5\x39\x5e\xac\x69\x25\xf7\x95\x11\x9b\xad\x91\x1c\xc4\xee\x8c\x11\x6b\xe4\xe2\xb3\x18\x5a\xe2\xa4\x93\xfc\x94\xb1\xcb\x55\x27\x67\x54\x6b\xe2\xae\x93\x39\x60\xb1\xb9\xc6\xd9\x86\xc4\x89\x91\x3a\x41\x1d\x61\x4d\x86\x33\xc6\x3e\x77\x0e\x61\x4e\x6c\x92\xe7\xb5\x6c\x1c\x96\xbc\x96\x71\x59\x12\xe7\x6e\x4f\x74\x59\xb7\x38\x2b\xd8\xf9\x8e\x38\x4e\xfd\x35\xad\x3a\x33\xef\x95\xd6\xf9\x9e\x77\xb9\x5d\x2b\xdf\xf3\x16\x97\x06\x61\xb1\xf2\xbd\xe0\x42\x7a\xe7\x35\x30\xfc\x17\xcb\xd0\xd7\x86\x2d\x45\x5f\x74\xf0\x0b\x24\x2f\x29\xcc\x45\x18\x2c\xb5\x6f\x6e\xbf\xa4\x89\x4f\x20\xd0\x8d\xba\x46\xa6\x40\x8c\x1b\x95\x47\x69\xb9\x52\xe0\xb8\xcd\x35\x05\x2e\xd3\x38\x0c\xec\x3c\x98\x6b\x23\xcc\xf6\xf3\xa1\xe7\x65\x94\xc5\x79\x16\xe6\x71\x1e\xaf\x54\x18\x3c\xf9\x5e\x0d\x7f\x3f\xd8\x78\x3e\xd9\x20\x36\xca\xc5\x02\x30\x1b\xfb\xfb\x74\x49\x5c\xbd\x7a\xc6\x4a\xf7\x5f\x6f\x8c\xee\x86\x8f\x87\x77\x1f\x76\x7f\x88\xaf\x8a\x98\x38\xac\xa4\x5e\x51\x2f\x59\x28\x7b\x70\xc7\x8b\x54\xe6\xf1\x9e\x81\xab\x4a\xe2\x14\x5c\x83\x5a\xc3\x1d\xe8\x64\x0e\xf7\x35\xd6\xc4\x71\x45\x9c\xe5\xc4\x71\x29\x77\x11\xdc\x83\x7f\x70\x0c\xee\x99\xce\x85\x0f\x51\x53\x5f\xd6\x5d\x57\x8b\xbd\x06\x6b\x13\xe1\xb4\xcf\x58\x2f\x75\xf7\x72\x16\x7e\x7f\x45\xbe\x6c\xd3\xd6\xea\x37\xf4\xaf\xcf\xab\xf8\x65\xbb\xdf\x52\xdf\xdf\x1c\xf1\x9f\x55\xf9\xdf\x14\xa7\xbb\x13\xf1\xef\xbe\x11\x71\x92\xe6\x61\x96\xfc\x9f\x6f\xc4\xcf\xc7\x3f\x7a\x1f\xea\x54\xf4\x0e\x1c\x9a\x82\xa3\x13\xe2\x24\x14\xae\x6f\xa1\xb7\x85\xe8\x42\x59\x8b\x7e\x76\x39\x71\x16\x13\x97\x85\xac\xc3\x53\x40\x5b\x63\xe2\x2e\x95\x7b\x02\x4e\x87\x6e\x95\x91\xe8\x3a\xb8\x15\xba\x00\x1b\x75\xeb\x6a\x3f\x26\x8e\x34\xb1\x76\xf7\xa3\x75\x9a\x58\x18\xe2\x44\x8b\x0e\x60\x7d\xd5\x89\x5e\xa0\x2f\x68\x6b\xd1\x37\xe8\x4c\xd3\x89\x16\x76\x8e\xf3\xed\x93\x8b\xf6\xe3\xfe\x81\xf3\xd1\x6f\xe4\xc6\xd9\x47\x5c\xa9\xf8\x06\xe6\x3c\x96\x7b\x6d\xb9\x1f\x71\x24\x62\x1b\x7a\x9d\x38\x8d\xc1\xdd\x85\xd6\x63\x0c\x5c\x75\x28\xfa\x03\x9c\xc8\x0b\x7a\x9f\xa6\x14\x0d\x85\x6f\xcb\x07\xa5\x68\x0f\xee\x76\x5e\x49\x6e\xa0\x41\xe0\x16\xc4\x62\xbf\x25\xd2\x6f\x00\x23\x74\x12\x71\xc0\xb7\xe5\x8f\x8c\xb8\x81\xae\xd6\x82\x3d\x76\xfd\x00\xfa\x17\x68\x32\xce\x13\x79\x4d\x5c\xfc\xb0\x55\x76\xc2\x63\x95\xeb\x81\xa0\xa5\x25\xf8\x27\x15\xfd\x05\x8e\xe4\xdc\xaf\xd5\x52\x1b\x56\xbb\x13\xd1\x59\xf4\x35\x4d\xe6\xce\x26\x91\x3a\xc0\x19\xc0\x86\xd5\xec\x5c\xce\xb6\x72\x7d\x0e\x6c\xd8\x9a\x70\x3d\x07\xe2\x42\xaf\x87\x9c\x5a\xed\x46\xcc\xb9\x70\x29\xf2\x08\x3b\xe8\x51\x70\xc6\xe8\x6b\x90\x53\xe8\x39\xe2\x2b\x91\xf7\xce\xf5\x60\xae\xff\xc8\xd0\x63\x14\x52\x67\x38\x7b\x8c\x53\xf4\x8f\x85\xf4\x0a\x16\x43\x21\xb9\x41\xdd\x76\x2d\x71\x8d\xfd\x8d\xf4\x15\xb1\xeb\xff\xd0\xa7\x20\xc6\xa6\x12\x7b\xc0\x86\xb9\x28\x96\x9e\x04\xf1\xa2\xfe\xd1\x3b\xe4\xee\xcc\x8c\x3b\x03\xf4\x66\xe5\x7f\x03\x00\x00\xff\xff\x95\x01\xfc\x79\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1526758700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\x56\xd0\xe3\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x45\x12\xe5\x02\x04\x00\x00\xff\xff\xd3\xb0\x8e\xc1\x3f\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 63, mode: os.FileMode(420), modTime: time.Unix(1526506084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x5d\x6f\xdb\x36\x14\x86\xaf\xc9\x5f\x71\xaa\x0b\x8f\x2a\x1c\xa9\x03\x76\x95\xc2\x03\x82\x66\x01\x7a\xd1\x14\x68\x57\xec\x22\xcb\x5c\x9a\x3a\xa6\x08\x4b\x87\x1a\x49\xd9\x09\xda\xfc\xf7\x81\xd4\x47\x9d\xcc\x45\x83\x61\x17\x86\x40\xf1\x7c\x3c\xef\xf1\x7b\xd4\x49\xb5\x93\x1a\xa1\x35\xda\xc9\x60\x2c\x79\xce\x4d\xdb\x59\x17\x40\x70\x96\x39\xd4\x78\xd7\x65\x9c\x65\xde\xba\x90\x9e\xc1\x29\x4b\xfb\x8c\x73\x96\x69\x13\xea\x7e\x53\x28\xdb\x96\xda\x36\x92\xf4\xd9\x50\x06\xcb\xf1\x99\x71\xb6\x86\x1f\x87\x95\x95\x0c\x72\x23\x3d\x96\xca\xaa\x9d\xb3\x52\xd5\xd5\x26\xe3\x6c\x63\x28\xde\x3c\xa7\x82\xb7\xbd\x53\x58\x6a\x7b\x36\x26\x65\xa7\xf8\x4a\xdd\x58\xfd\xe4\xa6\x95\x77\xad\xaa\x4a\xf5\x4b\xb9\x91\x6a\x87\x54\x95\xdd\x4e\x97\xca\xd2\xd6\xe8\x8c\xe7\x9c\x6f\x7b\x52\xa0\x31\xbc\x9b\x47\x24\x72\x10\x2f\xc7\xce\xc5\xf0\x1a\x97\x70\x73\x6b\x28\xe4\xf0\x85\xb3\xb2\x84\xdf\xdf\x5f\xbe\x3f\x87\x4b\xdc\xf4\x1a\x0e\xf5\x3d\x84\xfa\x78\xc6\x20\x1d\xd2\x4f\x01\x5c\x4f\x64\x48\x03\xee\x91\x20\xd4\xb6\xd7\x75\x8c\xbc\x07\x5f\xdb\x03\xf4\x1d\x18\x82\x51\x0f\x67\x1e\xce\x57\xd3\xa9\xf8\x80\x83\x62\x71\xe1\x3d\x86\x6b\xd9\xa2\x17\xf9\x92\x33\x16\x69\x05\xc9\x16\xc1\x07\x67\x48\xe7\x20\x6e\x6e\x37\xf7\x11\x10\x9d\xb3\x2e\x01\x32\xe6\x30\xf4\x8e\x20\x65\xa7\xf0\x9c\x33\xf6\x90\x73\xb6\x97\xee\x1b\xe8\x7a\x8f\xce\x1b\x4b\xb0\x82\xc1\x09\xc5\xbb\xde\x87\x37\xb6\xed\x4c\x83\xe2\xf3\x5f\x7f\x56\x2f\x3f\x8f\x39\x63\xa4\x1f\xc6\xc0\x59\xf4\x4b\xf1\x31\x21\x78\xe1\x8b\x44\x98\x73\xb6\xb5\x0e\xd6\x4b\x48\x80\xe7\x2b\x70\x92\x34\xc2\x78\x9d\xc8\xcc\x76\x04\x5f\xb7\xfb\x18\xf1\x2f\x96\xe2\xca\x50\x35\x14\x1e\xc0\x5f\x1f\x25\xbc\x58\x41\x96\x0d\x0a\xdb\x7d\x52\x1c\x6b\x8c\x9e\x2d\x2e\x82\x35\x62\x0e\x8e\x8a\x63\xbb\x18\xb4\x5a\x01\x99\x06\x16\x8b\xf8\x8e\x89\x06\x49\x4c\x82\xf2\x78\xf9\x2a\x87\xaf\x5f\x4f\xdd\xfd\x0a\xaf\x60\xb1\x98\xd5\xdf\x3c\xba\x3d\xfb\xf9\x36\x12\xb5\xfb\x71\xe8\x6c\x1e\xd2\x0a\x64\xd7\x21\x55\x73\xec\x12\x46\xa0\x07\x9e\x7e\x0f\xe3\x04\xdf\x52\xf0\xdf\x0a\x72\x56\xcd\xa2\x26\x27\xfc\x61\x42\xfd\x96\x7c\x90\xa4\x50\xc4\x90\x51\xd2\x8b\x41\x52\x6c\x1c\x5d\x5f\x5c\xc9\x20\x1b\x81\xce\xe5\xa9\x7a\x3b\x17\x9a\x8c\x7c\x8d\x87\x58\xeb\x63\xf2\xd5\x5c\x91\x33\x96\x1d\x6d\xd5\x12\xaa\x25\x0c\xcb\x51\x5c\x8e\x5b\xfb\xc9\x35\x22\x9b\x37\x37\xcb\x9f\xcd\x30\x9a\xb0\x5d\xce\xf3\xe3\x0f\xe3\xbe\x7d\xe8\xe9\xd1\xbe\x7d\x49\xc4\xeb\xc8\xfb\x64\x15\xe7\x66\x51\x4a\xf1\xa9\x13\xf9\xeb\xe3\xde\x8b\xc5\x74\x9a\x74\xfe\xe6\xdc\xb5\x7d\x53\x27\xe7\x7d\x87\x6c\xa2\xb8\x74\xb6\xbb\x68\x9a\xff\x44\x12\x73\x9f\xb0\xfc\xa8\x9b\x3d\xd0\xe9\x6e\xb3\x6f\x4e\x35\x2d\xcb\xb9\x5b\x3a\x6c\xad\x53\x98\x3e\x38\x84\x07\xf4\x61\xca\x06\xe9\xe1\x80\xe0\xf0\xef\xde\x38\x84\xca\x1e\xe8\xf8\x93\x14\x6c\xca\x56\x35\xaa\x5d\xac\x01\x78\x67\x7c\x40\x52\xf8\x58\xd7\x55\x2c\x2f\xbe\x6b\xf8\x67\x29\x7e\x3c\x28\x7b\xa0\xff\xe7\x4f\xfb\x27\x00\x00\xff\xff\xec\xb5\x29\x8b\xcd\x06\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 1741, mode: os.FileMode(420), modTime: time.Unix(1526509267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"1522125626_add_users_table.down.sql": _1522125626_add_users_tableDownSql,
	"1522125626_add_users_table.up.sql": _1522125626_add_users_tableUpSql,
	"bindata.go": bindataGo,
	"generate.go": generateGo,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"1522125626_add_users_table.down.sql": &bintree{_1522125626_add_users_tableDownSql, map[string]*bintree{}},
	"1522125626_add_users_table.up.sql": &bintree{_1522125626_add_users_tableUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"generate.go": &bintree{generateGo, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

