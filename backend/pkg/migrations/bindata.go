// Code generated by go-bindata.
// sources:
// .DS_Store
// 1522125626_add_users_table.down.sql
// 1522125626_add_users_table.up.sql
// bindata.go
// generate.go
// migrations.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1526506262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1522125626_add_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xda\xad\xba\xb3\x1c\x00\x00\x00")

func _1522125626_add_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1522125626_add_users_tableDownSql,
		"1522125626_add_users_table.down.sql",
	)
}

func _1522125626_add_users_tableDownSql() (*asset, error) {
	bytes, err := _1522125626_add_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1522125626_add_users_table.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1522346053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1522125626_add_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x39\x36\x52\x0f\xdc\x7b\x32\x74\x91\x2c\x8c\x03\xc1\x11\xed\x29\xb2\x62\xab\x89\x44\x7e\x64\x6f\x84\xca\xd3\xa3\x24\x05\x91\x33\x47\x7b\x66\x76\xbf\x9d\x87\x82\xa4\x25\x58\x79\xaf\x09\x53\x0a\x31\x61\x27\x00\xa0\xf5\x78\xa3\x42\x49\x8d\x97\x42\x3d\xcb\xe2\x8c\x27\x3a\xef\x17\xa9\x8e\xc1\x71\xf0\x95\x63\x70\xdb\x85\xc4\xae\x1b\xf1\xd9\x72\xb3\x3c\xf1\x35\xf4\x01\x26\xb7\x30\xa5\xd6\x38\xd2\xa3\x2c\xb5\x85\xc9\xdf\x77\xd9\x9a\x9f\x46\xff\xaf\xfc\xd8\xcc\x0e\x65\xec\x0d\x67\x98\x7a\x8e\xd7\xaa\x1e\xfc\x9f\xdf\xf9\x96\xde\x75\x01\x96\x4e\x16\xa5\x51\xaf\x25\xad\xca\xc5\x75\x21\x55\xe3\x87\xbb\x06\x3f\xfb\x7f\x57\xdc\xad\x7a\x74\xdc\xf6\x97\x2a\xd5\xd1\x71\xdd\x6c\x1d\x22\x3b\x08\x71\xeb\x6c\x9d\x09\x65\x8e\x74\x42\x6e\x7e\xda\x5b\xe8\xf6\x1b\xaa\xec\x20\xbe\x03\x00\x00\xff\xff\xba\xc6\x0f\x39\x68\x01\x00\x00")

func _1522125626_add_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1522125626_add_users_tableUpSql,
		"1522125626_add_users_table.up.sql",
	)
}

func _1522125626_add_users_tableUpSql() (*asset, error) {
	bytes, err := _1522125626_add_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1522125626_add_users_table.up.sql", size: 360, mode: os.FileMode(420), modTime: time.Unix(1527007964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6f\xdb\xc8\x15\x7e\x26\x7f\xc5\xac\x80\x5d\x88\x85\x2a\xf3\x7e\x11\xe0\x97\x8d\x53\x20\x0f\xcd\x02\x4d\xf6\xa9\xa7\x30\x86\xe4\x8c\x4a\x54\x12\x15\x92\xda\x1c\x3b\xf0\x7f\x2f\x3e\x9e\x91\x22\xa7\x9b\x75\x76\xb1\x7d\xb0\xcd\x19\xcf\xb9\x9f\xf3\x7d\xe7\xe6\x46\xbd\xea\x5b\xa3\xb6\xe6\x60\x06\x3d\x99\x56\xd5\x0f\x6a\xdb\xff\xb5\xee\x0e\xad\x9e\xf4\xda\xbf\xb9\x51\x63\x7f\x1a\x1a\x33\x6e\xf0\xbd\xbe\x7b\x77\xff\x6e\xea\x07\x83\x43\x94\xc5\x71\x14\x67\x79\x9c\xdf\xeb\xb6\xbd\x3f\x8d\x66\x18\xef\x27\x5d\xef\xcc\xba\xed\x3f\x1e\xd6\xe3\x87\xdd\x0b\xcf\x4e\xc7\xf3\xa3\xb3\xc1\x6d\x8f\xd3\xd9\x1d\x77\xdc\x77\xdb\x41\x4f\x5d\x7f\x18\xdd\xc5\xdd\x4f\xea\xed\x4f\xef\xd5\xeb\xbb\x37\xef\xbf\xf3\xfd\xa3\x6e\xfe\xa3\xb7\xe6\xea\x99\xef\x77\xfb\x63\x3f\x4c\x6a\xe9\x7b\x8b\xfa\x61\x32\xe3\xc2\xf7\x16\x4d\xbf\x3f\x0e\x66\x1c\x6f\xb6\x8f\xdd\x11\x17\x76\x3f\xe1\x4f\xd7\xcb\xef\x9b\xae\x3f\x4d\xdd\x0e\x87\x7e\x16\x38\xea\xe9\xdf\x37\xb6\xdb\x19\x7c\xe0\x62\x9c\x86\xee\xb0\x9d\xff\x37\x75\x7b\xb3\xf0\x03\xdf\xb7\xa7\x43\x73\x76\xff\x1f\x46\xb7\x4b\x7c\xa8\x7f\xfe\x0b\x66\x57\xea\xa0\xf7\x46\x89\x58\xa0\x96\xe7\x5b\x33\x0c\xfd\x10\xa8\x4f\xbe\xb7\x7d\x9c\x4f\x6a\x73\xab\xe0\xd5\xfa\xad\xf9\x08\x25\x66\x58\xce\x6e\xe3\xfc\xe3\xc9\x5a\x33\xcc\x6a\x83\xc0\xf7\x3a\x3b\x0b\x7c\x77\xab\x0e\xdd\x0e\x2a\xbc\xc1\x4c\xa7\xe1\x80\xe3\x4a\xd9\xfd\xb4\x7e\x0d\xed\x76\xb9\x80\x22\xf5\xfd\x87\x8d\xfa\xfe\x97\x85\x78\x32\xdb\x0a\x7c\xef\xc9\xf7\xbd\x5f\xf4\xa0\xea\x93\x55\x62\x47\x8c\xf8\xde\xbd\xb8\x73\xab\xba\x7e\xfd\xaa\x3f\x3e\x2c\x7f\xa8\x4f\x76\xa5\xb6\x8f\x81\xef\x35\xbb\xd7\x67\x4f\xd7\xaf\x76\xfd\x68\x96\x81\xff\x67\xf9\x03\x35\xa2\xff\x2b\x8a\xcc\x30\x88\xdf\xee\xb2\x3e\xd9\xf5\x8f\x70\x7d\x19\xac\xf0\xc2\x7f\xf2\xfd\xe9\xe1\x68\x94\x1e\x47\x33\x21\xe5\xa7\x66\x82\x96\x39\x3e\x57\x0f\xdf\xeb\x0e\xb6\x57\xaa\x1f\xd7\x7f\xeb\x76\xe6\xcd\xc1\xf6\x17\x39\x57\xc2\xf3\xfd\x95\x86\xb9\x86\x4a\xb9\x32\xfa\xde\xd8\x3d\xce\xe7\xee\x30\xe5\xa9\xef\xed\x31\x40\xea\xa2\xf4\xef\x7d\x6b\xe6\xcb\xf7\xdd\xde\x28\xb4\xc9\x1a\x5f\xb0\x33\xb7\xca\xd2\x76\x5f\xda\x0a\xd4\x5b\xbd\x37\xcb\xc0\x59\x80\x4d\x17\xa5\xed\xd6\xb0\xee\x3f\xfd\x86\xec\xbb\xee\x11\xb2\xb3\x37\xcf\x45\xe1\xe8\x6f\x8a\xc2\xd7\x65\x70\xed\xf9\x73\x05\x08\xed\x25\x05\x08\x6e\x19\x7c\x0e\xf4\x7f\x34\xb8\xe8\xbf\xae\xe4\xcd\x78\xd7\x0d\xcb\x40\xd5\x7d\xbf\xbb\x96\xd6\xbb\xf1\x85\xc8\x1f\x46\x09\xdc\x0c\x56\x37\xe6\xd3\xd3\x95\xb4\x6b\x09\x74\xf9\xfd\xdd\x78\x3f\x02\xb4\xd4\xad\xeb\x83\xe5\x82\x38\xb2\xc4\x65\x4d\x1c\x96\xc4\x61\xf8\xeb\x3f\xd6\x12\x9b\x86\xb8\x2d\x89\x93\x88\x38\xd4\xc4\x61\x2c\xdf\x51\x48\x5c\x66\xc4\x26\x22\x4e\x0a\xb9\x4b\x33\xe2\x26\x24\x8e\x73\x62\x9d\x11\xe7\x19\x71\x04\x19\xe8\x81\xce\x96\xb8\x89\x89\xeb\x98\xb8\x32\xf2\x36\xac\x89\xb3\x92\xb8\x80\x1f\x19\xb1\xad\x89\xa3\x86\x38\x6b\x89\xab\x9c\xb8\xa8\x88\xf3\x50\x7e\xda\x8c\x38\x35\xc4\x65\x43\xdc\xd4\xf2\x36\x85\x9f\x46\x64\xe1\x47\xac\x89\xa3\x5c\xfc\x89\x13\x89\xa3\xaa\x89\x8d\x21\xae\x0b\xe2\x28\x21\xae\x60\x17\xff\x4f\xc5\x6e\x11\x11\x37\x29\x71\x5a\x13\x97\x15\x71\x69\x89\xab\x8c\xb8\x0d\xc5\x8f\x08\x3e\x5a\xe2\x34\x21\x4e\xd3\xcf\x3f\x4d\x4e\x9c\xe7\x12\x4b\x9d\x4a\xbe\x6c\x46\x1c\xc2\x4e\x44\x5c\x45\x92\x9f\xb8\x71\xbe\x26\xc4\x39\xce\x35\x71\x5b\x13\xd7\x8d\xe8\x30\x05\x71\x98\x88\x9d\xba\x26\x4e\x32\xe2\xaa\x22\x8e\x5b\xe2\xbc\x91\x3c\x22\x86\xb6\x10\x7f\xe1\x0b\xf2\x81\xf8\xe6\xfb\x92\xb8\x69\x24\xee\x3a\x97\xfc\x36\xad\xe4\x28\x75\x7f\x13\xc4\x89\x37\x25\x71\x6b\x89\xdb\x4a\xee\x74\x24\x77\xba\x90\x9a\xc2\x37\xd8\xb4\x90\x33\xc4\x45\x21\x76\x6c\x4c\x6c\x2c\x71\x71\x8e\x17\x6f\x1a\xc9\x7d\x65\x45\x67\x63\x25\x07\xb1\xab\x31\x62\x8d\x5c\x7c\xb3\x0f\x0d\x71\xd2\x4a\x7e\xca\xd8\xe5\xaa\x95\x1a\x69\x43\xdc\xb6\x72\x07\x5f\xe6\x5c\xa3\xb6\x21\x71\x62\xa5\x4f\xd0\x47\x78\x93\xa1\xc6\x90\x73\x75\x08\x73\x62\x9b\x3c\xef\x65\xeb\x7c\xc9\xb5\x9c\xcb\x92\x38\x77\x32\xd1\xe5\xdd\xe2\xcc\x60\xe7\x19\x71\x98\xfa\x6b\x5c\x75\x46\xde\x2b\xae\xf3\x3d\xef\x32\x5d\x2b\xdf\xf3\x16\x97\x05\x61\xb1\xf2\xbd\xe0\x02\x7a\xe7\x37\x50\xfc\x97\x19\xa1\xaf\x15\xcf\x10\x7d\xe1\xc1\x2f\x3c\x79\x89\x61\x2e\xc4\x30\x43\xfb\xe6\xf6\x4b\x98\xf8\x04\x00\xdd\xa8\x6b\xcf\x14\x80\x71\xa3\xf2\x28\x2d\x57\x0a\x18\xb7\xb9\x86\xc0\x65\x1a\x87\xc1\x7c\x0f\xe4\xda\x08\xb2\xfd\x7c\xe8\x78\x19\x65\x71\x9e\x85\x79\x9c\xc7\x2b\x15\x06\x4f\xbe\xa7\x61\xef\x87\x39\x9e\x4f\x73\x10\x1b\xe5\x62\x81\x33\x9b\xf9\xf7\xd3\x25\x71\x7a\xf5\x0c\x95\xee\xbf\xbe\x18\xdd\xf5\x1f\x0f\xef\x3e\xec\xfe\x10\x5e\x15\x31\x71\x58\x49\xbf\xa2\x5f\xb2\x50\x64\x30\xe3\x45\x2a\xf7\xf8\xce\x80\x55\x25\x71\x0a\xac\x41\xaf\x61\x06\x5a\xb9\xc3\xbc\xc6\x86\x38\xae\x88\xb3\x9c\x38\x2e\x65\x16\x81\x3d\xf8\x0b\x8c\xc1\x9c\x99\x5c\xf0\x10\x3d\xf5\x65\xdf\xb5\x5a\xf4\xd5\x78\x9b\x08\xa6\x7d\xf6\xf5\xd2\x77\x2f\x67\xe1\xf7\x77\xe4\xcb\x3a\xe7\x5e\xfd\x86\xfd\xf5\x79\x17\xbf\xac\xf7\x5b\xfa\xfb\x9b\x23\xfe\xb3\x3a\xff\x9b\xe2\x74\x33\x11\xff\xee\x89\x88\x93\x34\x0f\xb3\xe4\xff\x3c\x11\x3f\x1f\xff\xe8\x3c\xe8\x54\xf8\xae\x71\xfd\xdb\x24\xc4\x49\xe8\xf8\x3b\x75\x98\x0e\x4e\xd5\xc4\x09\x38\x21\x27\xce\xdc\xec\xb4\x0d\x71\x01\xdc\x8e\x65\x76\x2a\xc7\x65\xe0\x5f\xf0\x55\x13\x09\xcf\x99\x56\x66\x65\xc6\xfc\x98\x58\x3b\x1e\x05\x36\x43\x77\x9e\x12\xe7\x56\xec\x35\x9a\xb8\x4d\x88\x75\x22\xfc\x0b\xde\x86\xde\x04\x33\x58\x88\x3d\x70\x2a\x78\xa6\x06\x0f\xb7\xc4\xa5\xe3\x0b\xc4\x12\x67\x6e\x5f\xa8\x88\xb5\x95\x59\xc7\xfc\x62\x37\x01\xe7\xcf\xfc\x5a\x38\x4e\x09\x85\x4f\xc0\x99\xb0\x97\xc6\xc4\x29\xf8\x1d\xbb\x45\x21\xe7\xc4\xf1\xa3\x89\x25\x2e\xc8\x26\x5a\xf2\x12\x15\xc4\x1a\xef\x8d\xc4\x0a\xdc\x00\x1f\x61\x37\xc8\x13\xe2\x22\x14\x1e\xc7\x1e\x84\xfd\x01\x1c\x06\x0e\xb7\x91\xf0\x2b\xb0\x08\xb3\x0f\xde\xc3\x1d\x78\xdd\xa6\x6e\xf7\xc8\x65\x1f\x41\x2d\xb0\x2b\xb5\xb9\xf0\x71\x1b\xbb\xdc\x34\xc4\x75\xe6\x74\x57\xc2\xaf\xe0\x62\xe8\xad\xb4\x70\x6e\x9a\xbb\x1a\x5b\xe1\xe2\xf3\x1e\x10\x1a\xd9\x19\xb0\xbb\x81\x5f\xf3\x82\xb8\x42\xce\xb4\xc4\x82\x3d\x42\x83\x43\x8d\xc8\x9d\xf9\xdb\x56\xb2\x73\xb5\xe0\xfd\x4c\xfc\xc4\x19\x7d\x13\xb9\x9d\x2e\x8b\xc4\x1e\xea\x30\xe3\xa5\x26\x6e\x32\x79\x1f\x3b\x5c\x35\x89\xd4\x0c\xbb\x0c\xb8\x19\xfc\x8d\xfd\xa7\x00\x1e\x17\xd2\x57\x90\x85\x3f\xe8\x2b\x9c\x6d\x2e\x35\x01\xb6\x62\xcf\x6b\x5d\xbe\x5b\xb7\x03\x81\xef\xb1\x57\x24\xf5\x67\x3c\x37\x6e\x57\x41\x8f\xa0\x0f\x10\x33\xe2\x83\x4e\xd4\x36\x37\xd2\x7f\xc0\xe2\x0c\x35\x2e\xc5\x0e\x6a\x84\xf8\xcd\x7f\x03\x00\x00\xff\xff\xd0\x7b\xf6\x72\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1527010488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\x56\xd0\xe3\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x45\x12\xe5\x02\x04\x00\x00\xff\xff\xd3\xb0\x8e\xc1\x3f\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 63, mode: os.FileMode(420), modTime: time.Unix(1526506084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x5d\x6f\xdb\x36\x14\x86\xaf\xc9\x5f\x71\xaa\x0b\x8f\x2a\x1c\xa9\x03\x76\x95\xc2\x03\x82\x66\x01\x7a\xd1\x14\x68\x57\xec\x22\xcb\x5c\x9a\x3a\xa6\x08\x4b\x87\x1a\x49\xd9\x09\xda\xfc\xf7\x81\xd4\x47\x9d\xcc\x45\x83\x61\x17\x86\x40\xf1\x7c\x3c\xef\xf1\x7b\xd4\x49\xb5\x93\x1a\xa1\x35\xda\xc9\x60\x2c\x79\xce\x4d\xdb\x59\x17\x40\x70\x96\x39\xd4\x78\xd7\x65\x9c\x65\xde\xba\x90\x9e\xc1\x29\x4b\xfb\x8c\x73\x96\x69\x13\xea\x7e\x53\x28\xdb\x96\xda\x36\x92\xf4\xd9\x50\x06\xcb\xf1\x99\x71\xb6\x86\x1f\x87\x95\x95\x0c\x72\x23\x3d\x96\xca\xaa\x9d\xb3\x52\xd5\xd5\x26\xe3\x6c\x63\x28\xde\x3c\xa7\x82\xb7\xbd\x53\x58\x6a\x7b\x36\x26\x65\xa7\xf8\x4a\xdd\x58\xfd\xe4\xa6\x95\x77\xad\xaa\x4a\xf5\x4b\xb9\x91\x6a\x87\x54\x95\xdd\x4e\x97\xca\xd2\xd6\xe8\x8c\xe7\x9c\x6f\x7b\x52\xa0\x31\xbc\x9b\x47\x24\x72\x10\x2f\xc7\xce\xc5\xf0\x1a\x97\x70\x73\x6b\x28\xe4\xf0\x85\xb3\xb2\x84\xdf\xdf\x5f\xbe\x3f\x87\x4b\xdc\xf4\x1a\x0e\xf5\x3d\x84\xfa\x78\xc6\x20\x1d\xd2\x4f\x01\x5c\x4f\x64\x48\x03\xee\x91\x20\xd4\xb6\xd7\x75\x8c\xbc\x07\x5f\xdb\x03\xf4\x1d\x18\x82\x51\x0f\x67\x1e\xce\x57\xd3\xa9\xf8\x80\x83\x62\x71\xe1\x3d\x86\x6b\xd9\xa2\x17\xf9\x92\x33\x16\x69\x05\xc9\x16\xc1\x07\x67\x48\xe7\x20\x6e\x6e\x37\xf7\x11\x10\x9d\xb3\x2e\x01\x32\xe6\x30\xf4\x8e\x20\x65\xa7\xf0\x9c\x33\xf6\x90\x73\xb6\x97\xee\x1b\xe8\x7a\x8f\xce\x1b\x4b\xb0\x82\xc1\x09\xc5\xbb\xde\x87\x37\xb6\xed\x4c\x83\xe2\xf3\x5f\x7f\x56\x2f\x3f\x8f\x39\x63\xa4\x1f\xc6\xc0\x59\xf4\x4b\xf1\x31\x21\x78\xe1\x8b\x44\x98\x73\xb6\xb5\x0e\xd6\x4b\x48\x80\xe7\x2b\x70\x92\x34\xc2\x78\x9d\xc8\xcc\x76\x04\x5f\xb7\xfb\x18\xf1\x2f\x96\xe2\xca\x50\x35\x14\x1e\xc0\x5f\x1f\x25\xbc\x58\x41\x96\x0d\x0a\xdb\x7d\x52\x1c\x6b\x8c\x9e\x2d\x2e\x82\x35\x62\x0e\x8e\x8a\x63\xbb\x18\xb4\x5a\x01\x99\x06\x16\x8b\xf8\x8e\x89\x06\x49\x4c\x82\xf2\x78\xf9\x2a\x87\xaf\x5f\x4f\xdd\xfd\x0a\xaf\x60\xb1\x98\xd5\xdf\x3c\xba\x3d\xfb\xf9\x36\x12\xb5\xfb\x71\xe8\x6c\x1e\xd2\x0a\x64\xd7\x21\x55\x73\xec\x12\x46\xa0\x07\x9e\x7e\x0f\xe3\x04\xdf\x52\xf0\xdf\x0a\x72\x56\xcd\xa2\x26\x27\xfc\x61\x42\xfd\x96\x7c\x90\xa4\x50\xc4\x90\x51\xd2\x8b\x41\x52\x6c\x1c\x5d\x5f\x5c\xc9\x20\x1b\x81\xce\xe5\xa9\x7a\x3b\x17\x9a\x8c\x7c\x8d\x87\x58\xeb\x63\xf2\xd5\x5c\x91\x33\x96\x1d\x6d\xd5\x12\xaa\x25\x0c\xcb\x51\x5c\x8e\x5b\xfb\xc9\x35\x22\x9b\x37\x37\xcb\x9f\xcd\x30\x9a\xb0\x5d\xce\xf3\xe3\x0f\xe3\xbe\x7d\xe8\xe9\xd1\xbe\x7d\x49\xc4\xeb\xc8\xfb\x64\x15\xe7\x66\x51\x4a\xf1\xa9\x13\xf9\xeb\xe3\xde\x8b\xc5\x74\x9a\x74\xfe\xe6\xdc\xb5\x7d\x53\x27\xe7\x7d\x87\x6c\xa2\xb8\x74\xb6\xbb\x68\x9a\xff\x44\x12\x73\x9f\xb0\xfc\xa8\x9b\x3d\xd0\xe9\x6e\xb3\x6f\x4e\x35\x2d\xcb\xb9\x5b\x3a\x6c\xad\x53\x98\x3e\x38\x84\x07\xf4\x61\xca\x06\xe9\xe1\x80\xe0\xf0\xef\xde\x38\x84\xca\x1e\xe8\xf8\x93\x14\x6c\xca\x56\x35\xaa\x5d\xac\x01\x78\x67\x7c\x40\x52\xf8\x58\xd7\x55\x2c\x2f\xbe\x6b\xf8\x67\x29\x7e\x3c\x28\x7b\xa0\xff\xe7\x4f\xfb\x27\x00\x00\xff\xff\xec\xb5\x29\x8b\xcd\x06\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 1741, mode: os.FileMode(420), modTime: time.Unix(1526509267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"1522125626_add_users_table.down.sql": _1522125626_add_users_tableDownSql,
	"1522125626_add_users_table.up.sql": _1522125626_add_users_tableUpSql,
	"bindata.go": bindataGo,
	"generate.go": generateGo,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"1522125626_add_users_table.down.sql": &bintree{_1522125626_add_users_tableDownSql, map[string]*bintree{}},
	"1522125626_add_users_table.up.sql": &bintree{_1522125626_add_users_tableUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"generate.go": &bintree{generateGo, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

